* TipIt protocol

A cheap way of implementing tipping.

** Motivation

 With less people carrying cash every day because of debit card systems, the act of tipping (a small sum of money given to someone as a gratitude expression) is getting harder and harder.

 A lot of people still depends on tips for a living (street performers of all kinds) which because the nature of their service the bank account + POS systems doesn't work.

 *TipIt* is a protocol that explores a solution to this problem by using electronic devices.

 In the future, a solution based on some blockchain technology like bitcoin is probably a much better solution which will not even require a trusted party, but the learning curve and
 the price for that technology is still high.

** Objectives

   - Transactions should be easy
   - Transactions should NOT require internet connection
   - Devices used for receiving tips should be able to be built cheaply
   - Interaction between the tip payers and the receivers should be trustless and secure (can be done by using cryptography).

** Overview

   *TipIt* solution is to create a one time use virtual coin, that can be exchanged between the tip payer and the receiver using cryptography to secure the transaction.

   It depends on a central authority, the *exchange*, that will create, sell, buy and destroy this virtual coins, while enforcing rules like avoiding double spent coins.

** Actors
*** Exchange

    A centralized entity that can exchange money (cash, credit card, bitcoins, etc) into *COINS* and back.

    *This is the only actor that needs to be trusted by users*

    It's normal operation will be to create *COINS*, sell them to *payers*, buy *COINS* from *receivers* and destroy them.

    It can be implemented as a centralized server that receives credit card payments and gives back signed *COINS*.

    It also needs a set of places where people can fiscally go to obtain money by selling their *COINS*. This is important since most *receivers* of *TipIt* probably don't own
    a bank account.

    The *exchange* should keep track of what *COINS* where issued to what users (document id, credit card, full name, etc) in order to track down attacks like double spends.

    Once tokens are sold by the *receivers* the *exchange* needs to destroy used *COINS* probably by blacklisting them.

*** Payers

    Payers are anybody who wants to tip. Can buy *COINS* from the *exchange* and use them to tip *receivers*.

    Can be implemented with a cellphone app that can buy *COINS* (in advance or online) from the *exchange* and tip *receivers* just by using the cellphone.

*** Receivers

    Receivers are anybody who receives tips. Can collect *COINS* from *payers* and then exchange them for money by going to the *exchange*.

    Can be implemented as any device that can at least :

    - exchange information with a cellphone (bluetooth, NFC, etc)
    - sign data
    - validate a cryptographyc signature
    - store *COINS* data
    - work with a rechargeable battery

    A good implementation should make the devices needed by the *receivers* implemented as cheaper as possible, since not all people interested in tips can afford expensive equipment like a cellphone.


** Tip Tokens and COINS

   *Tokens* are structured data that contains [TokenId, TokenValue, TokenCurrency]

   *COINS* are just *Tokens* signed by the *payers* and then authorized (signed) by the *exchange* before they can be used.

   Every token (then every coin) is meant to be used only once, then it is banned forever. This rules are enforced by the *exchange*.

   An example coin implementation can look like:
 #+BEGIN_SRC javascript
   {
     token: {
       tokenId: "8a3e0ef9-b702-446d-a133-d0b091f1bdd3",
       value: 10,
       currency: "U$"
     },
     exchangeSignature: "..."
   }
 #+END_SRC

   Probably a binary format is preferred so *receivers* devices can be implemented with cheaper hardware.
*** Token format
    TBD
*** Coin format
    TDB

** Obtaining COINS

   For *payers* to obtain *COINS* they first need to register in the *exchange* with an id, credit card, and public key (generated by the app normally).

   When *payers* wants to obtain *COINS* they first need to generate *Tokens* by choosing a value and a currency.

   *Tokens* are signed with the users public key and then sent to the *exchange* together with the money to cover for their values.

   The *exchange* can validate the token signature by using the registered user public key, and keep the signed token as a proof of request.

   The *exchange* will track the users coin so if bad *payers* try to double spend a token the *exchange* track it down and resolve the problem.

   The last step for the *exchange* before sending the created coins back to the user is to generate them by signing the *Tokens* with the *exchange* private key which will correspond to the public key known by all *receivers* devices.

*** Request_Msg
    TBD
*** Response_Msg
    TBD

** Paying (Tipping)

   The act of tipping is the act of transferring the *COINS* in the *payers* device, to the *receivers* device.

   This can be accomplished by any wireless communication system supported by both devices.

   When the transfer is complete the *payers* device should show success.

** Receiving

   You receive a tip by offering the *receivers* device to the *payers* and wait for a confirmation.

   The *receivers* device should first validate the *COINS* exchange signature and then store it if valid. Only when a valid coin is received the device should show a success light.

   At any moment *receivers* can go to the *exchange* and sell their *COINS* for money.

** Selling COINS

   For *receivers* to sell *COINS* they first need to register in the *exchange* with an id and public key.

   Before sending the *COINS* to the *exchange* the *receivers* device signs the coin with it private key which the *exchange* will have to validate and keep as a sell proof.

   The *exchange* will track every sold token in a blacklist so they can only be sold once.

** Implementation ideas
*** Exchange server
    TBD
*** Payers cellphone app
    TBD
*** Receivers device
    TBD
